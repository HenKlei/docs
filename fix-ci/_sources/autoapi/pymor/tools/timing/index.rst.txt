:mod:`pymor.tools.timing`
=========================

.. py:module:: pymor.tools.timing


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.tools.timing.Timer



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.tools.timing.busywait



.. py:class:: Timer(section, log=getLogger(__name__))

   Class for finding code runtime.

   You can use me as a context manager, plain instance or decorator to time execution
   of a code scope::

       with Timer() as timer:
           do_some_stuff()
           do more stuff()
       #outputs time in (s)

       ### OR ###

       @timing.Timer('name', logging.debug)
       def function(*args):
           do_stuff

       function(1)
       #outputs time in (s) to logging.debug

       ### OR ###

       timer = timing.Timer()
       timer.start()
       do_stuff()
       timer.stop()
       print(timer.dt)

   .. py:method:: start(self)


   .. py:method:: stop(self)


   .. py:method:: __enter__(self)


   .. py:method:: __exit__(self, type_, value, traceback)


   .. py:method:: __call__(self, func)



.. py:function:: busywait(amount)


