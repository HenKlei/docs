:mod:`pymor.vectorarrays.block`
===============================

.. py:module:: pymor.vectorarrays.block


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.vectorarrays.block.BlockVectorArrayImpl
   pymor.vectorarrays.block.BlockVectorArray
   pymor.vectorarrays.block.BlockVectorSpace



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.vectorarrays.block._indexed



.. py:class:: BlockVectorArrayImpl(blocks, space)

   Bases: :py:obj:`pymor.vectorarrays.interface.VectorArrayImpl`

   Implementation of a |VectorArray|.

   The |VectorArray| base class defers all calls to interface methods to an
   internal `impl` object of this type. Indexing, error checking or non-standard
   inner products are handled by |VectorArray|. Possible indices are passed
   to the methods of :class:`VectorArrayImpl` as `ind`, `oind` or `xind`
   parameters. These can either be `None`, in case the array has not been indexed,
   a `slice` object, or a Python list of non-negative numbers.

   .. py:method:: __len__(self)


   .. py:method:: to_numpy(self, ensure_copy, ind)


   .. py:method:: real(self, ind)


   .. py:method:: imag(self, ind)


   .. py:method:: conj(self, ind)


   .. py:method:: delete(self, ind)


   .. py:method:: append(self, other, remove_from_other, oind)


   .. py:method:: copy(self, deep, ind)


   .. py:method:: scal(self, alpha, ind)


   .. py:method:: scal_copy(self, alpha, ind)


   .. py:method:: axpy(self, alpha, x, ind, xind)


   .. py:method:: axpy_copy(self, alpha, x, ind, xind)


   .. py:method:: inner(self, other, ind, oind)


   .. py:method:: pairwise_inner(self, other, ind, oind)


   .. py:method:: lincomb(self, coefficients, ind)


   .. py:method:: norm2(self, ind)


   .. py:method:: dofs(self, dof_indices, ind)


   .. py:method:: amax(self, ind)


   .. py:method:: _blocks_are_valid(self, after_creation=True)


   .. py:method:: _compute_bins(self)



.. py:class:: BlockVectorArray(space, impl, base=None, ind=None, _len=None)

   Bases: :py:obj:`pymor.vectorarrays.interface.VectorArray`

   |VectorArray| where each vector is a direct sum of sub-vectors.

   Given a list of equal length |VectorArrays| `blocks`, this |VectorArray|
   represents the direct sums of the vectors contained in the arrays.
   The associated |VectorSpace| is :class:`BlockVectorSpace`.

   :class:`BlockVectorArray` can be used in conjunction with
   :class:`~pymor.operators.block.BlockOperator`.

   .. py:attribute:: impl_type
      

      

   .. py:method:: block(self, ind)

      Return a copy of a single block or a sequence of blocks.


   .. py:method:: num_blocks(self)
      :property:


   .. py:method:: blocks(self)
      :property:



.. py:class:: BlockVectorSpace(subspaces)

   Bases: :py:obj:`pymor.vectorarrays.interface.VectorSpace`

   |VectorSpace| of :class:`BlockVectorArrays <BlockVectorArray>`.

   A :class:`BlockVectorSpace` is defined by the |VectorSpaces| of the
   individual subblocks which constitute a given array. In particular
   for a given :class`BlockVectorArray` `U`, we have the identity ::

       (U.blocks[0].space, U.blocks[1].space, ..., U.blocks[-1].space) == U.space.

   .. admonition:: Parameters

       subspaces
           The tuple defined above.
           
   .. py:method:: __eq__(self, other)

      Return self==value.


   .. py:method:: __hash__(self)

      Return hash(self).


   .. py:method:: dim(self)
      :property:


   .. py:method:: zeros(self, count=1, reserve=0)

      Create a |VectorArray| of null vectors

      .. admonition:: Parameters

          count
              The number of vectors.
          reserve
              Hint for the backend to which length the array will grow.
              
      .. admonition:: Returns

          A |VectorArray| containing `count` vectors with each component zero.
              

   .. py:method:: make_array(cls, obj)

      Create a |VectorArray| from raw data.

      This method is used in the implementation of |Operators|
      and |Models| to create new |VectorArrays| from
      raw data of the underlying solver backends. The ownership
      of the data is transferred to the newly created array.

      The exact signature of this method depends on the wrapped
      solver backend.


   .. py:method:: make_block_diagonal_array(self, obj)


   .. py:method:: from_numpy(self, data, ensure_copy=False)

      Create a |VectorArray| from a |NumPy array|

      Note that this method will not be supported by all vector
      space implementations.

      .. admonition:: Parameters

          data
              |NumPy| array of shape `(len, dim)` where `len` is the
              number of vectors and `dim` their dimension.
          ensure_copy
              If `False`, modifying the returned |VectorArray| might alter the original
              |NumPy array|. If `True` always a copy of the array data is made.
              
      .. admonition:: Returns

          A |VectorArray| with `data` as data.
              


.. py:function:: _indexed(block, ind)


