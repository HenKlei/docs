:mod:`pymor.vectorarrays.mpi`
=============================

.. py:module:: pymor.vectorarrays.mpi

.. autoapi-nested-parse::

   Wrapper classes for building MPI distributed |VectorArrays|.

   This module contains several wrapper classes which allow to
   transform single rank |VectorArrays| into MPI distributed
   |VectorArrays| which can be used on rank 0 like ordinary
   |VectorArrays|.

   The implementations are based on the event loop provided
   by :mod:`pymor.tools.mpi`.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.vectorarrays.mpi.MPIVectorArrayImpl
   pymor.vectorarrays.mpi.MPIVectorArray
   pymor.vectorarrays.mpi.MPIVectorSpace
   pymor.vectorarrays.mpi.RegisteredLocalSpace
   pymor.vectorarrays.mpi.MPIVectorArrayNoCommImpl
   pymor.vectorarrays.mpi.MPIVectorArrayNoComm
   pymor.vectorarrays.mpi.MPIVectorSpaceNoComm
   pymor.vectorarrays.mpi.MPIVectorArrayAutoCommImpl
   pymor.vectorarrays.mpi.MPIVectorArrayAutoComm
   pymor.vectorarrays.mpi.MPIVectorSpaceAutoComm



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.vectorarrays.mpi._register_local_space
   pymor.vectorarrays.mpi._get_local_space
   pymor.vectorarrays.mpi._MPIVectorSpace_zeros
   pymor.vectorarrays.mpi._MPIVectorSpace_dim
   pymor.vectorarrays.mpi._MPIVectorSpace_check_local_spaces
   pymor.vectorarrays.mpi._MPIVectorArray_append
   pymor.vectorarrays.mpi._MPIVectorArray_copy
   pymor.vectorarrays.mpi._MPIVectorArray_scal
   pymor.vectorarrays.mpi._MPIVectorArray_axpy
   pymor.vectorarrays.mpi._MPIVectorArray_inner
   pymor.vectorarrays.mpi._MPIVectorArray_pairwise_inner
   pymor.vectorarrays.mpi._MPIVectorArray_lincomb
   pymor.vectorarrays.mpi._MPIVectorArray_norm
   pymor.vectorarrays.mpi._MPIVectorArray_norm2
   pymor.vectorarrays.mpi._MPIVectorArray_dofs
   pymor.vectorarrays.mpi._MPIVectorArray_amax
   pymor.vectorarrays.mpi._MPIVectorArray_real
   pymor.vectorarrays.mpi._MPIVectorArray_imag
   pymor.vectorarrays.mpi._MPIVectorArray_conj
   pymor.vectorarrays.mpi._MPIVectorSpaceAutoComm_dim
   pymor.vectorarrays.mpi._MPIVectorArrayAutoComm_inner
   pymor.vectorarrays.mpi._MPIVectorArrayAutoComm_pairwise_inner
   pymor.vectorarrays.mpi._MPIVectorArrayAutoComm_norm2
   pymor.vectorarrays.mpi._MPIVectorArrayAutoComm_dofs
   pymor.vectorarrays.mpi._MPIVectorArrayAutoComm_amax
   pymor.vectorarrays.mpi._indexed



Attributes
~~~~~~~~~~

.. autoapisummary::

   pymor.vectorarrays.mpi._local_space_registry
   pymor.vectorarrays.mpi._local_space_to_id


.. py:class:: MPIVectorArrayImpl(obj_id, space)

   Bases: :py:obj:`pymor.vectorarrays.interface.VectorArrayImpl`

   Implementation of a |VectorArray|.

   The |VectorArray| base class defers all calls to interface methods to an
   internal `impl` object of this type. Indexing, error checking or non-standard
   inner products are handled by |VectorArray|. Possible indices are passed
   to the methods of :class:`VectorArrayImpl` as `ind`, `oind` or `xind`
   parameters. These can either be `None`, in case the array has not been indexed,
   a `slice` object, or a Python list of non-negative numbers.

   .. py:method:: to_numpy(self, ensure_copy, ind)
      :abstractmethod:


   .. py:method:: __len__(self)


   .. py:method:: delete(self, ind)


   .. py:method:: copy(self, deep, ind)


   .. py:method:: append(self, other, remove_from_other, oind)


   .. py:method:: scal(self, alpha, ind)


   .. py:method:: axpy(self, alpha, x, ind, xind)


   .. py:method:: inner(self, other, ind, oind)


   .. py:method:: pairwise_inner(self, other, ind, oind)


   .. py:method:: lincomb(self, coefficients, ind)


   .. py:method:: norm2(self, ind)


   .. py:method:: dofs(self, dof_indices, ind)


   .. py:method:: amax(self, ind)


   .. py:method:: __del__(self)


   .. py:method:: real(self, ind)


   .. py:method:: imag(self, ind)


   .. py:method:: conj(self, ind)



.. py:class:: MPIVectorArray(space, impl, base=None, ind=None, _len=None)

   Bases: :py:obj:`pymor.vectorarrays.interface.VectorArray`

   MPI distributed |VectorArray|.

   Given a local |VectorArray| on each MPI rank, this wrapper class
   uses the event loop from :mod:`pymor.tools.mpi` to build a global
   MPI distributed vector array from these local arrays.

   Instances of `MPIVectorArray` can be used on rank 0 like any
   other (non-distributed) |VectorArray|.

   Note, however, that the implementation of the local VectorArrays
   needs to be MPI aware. For instance, `cls.inner` must perform the
   needed MPI communication to sum up the local inner products and
   return the sums on rank 0.

   Default implementations for all communication requiring
   interface methods are provided by :class:`MPIVectorArrayAutoComm`
   (also see :class:`MPIVectorArrayNoComm`).

   Note that resource cleanup is handled by :meth:`object.__del__`.
   Please be aware of the peculiarities of destructors in Python!

   The associated |VectorSpace| is :class:`MPIVectorSpace`.

   .. py:attribute:: impl_type
      

      


.. py:class:: MPIVectorSpace(local_spaces)

   Bases: :py:obj:`pymor.vectorarrays.interface.VectorSpace`

   |VectorSpace| of :class:`MPIVectorArrays <MPIVectorArray>`.

   .. admonition:: Parameters

       local_spaces
           `tuple` of the different |VectorSpaces| of the local
           |VectorArrays| on the MPI ranks.
           Alternatively, the length of `local_spaces` may be 1, in which
           case the same |VectorSpace| is assumed for all ranks.
           
   .. py:attribute:: array_type
      

      

   .. py:method:: make_array(self, obj_id)

      Create array from rank-local |VectorArray| instances.

      .. admonition:: Parameters

          obj_id
              :class:`~pymor.tools.mpi.ObjectId` of the MPI distributed
              instances of `cls` wrapped by this array.
              
      .. admonition:: Returns

          The newly created : class:`MPIVectorArray`.
              

   .. py:method:: zeros(self, count=1, reserve=0)

      Create a |VectorArray| of null vectors

      .. admonition:: Parameters

          count
              The number of vectors.
          reserve
              Hint for the backend to which length the array will grow.
              
      .. admonition:: Returns

          A |VectorArray| containing `count` vectors with each component zero.
              

   .. py:method:: dim(self)
      :property:


   .. py:method:: __eq__(self, other)

      Return self==value.


   .. py:method:: __repr__(self)

      Return repr(self).



.. py:class:: RegisteredLocalSpace

   Bases: :py:obj:`int`

   int([x]) -> integer
   int(x, base=10) -> integer

   Convert a number or string to an integer, or return 0 if no arguments
   are given.  If x is a number, return x.__int__().  For floating point
   numbers, this truncates towards zero.

   If x is not a number or if base is given, then x must be a string,
   bytes, or bytearray instance representing an integer literal in the
   given base.  The literal can be preceded by '+' or '-' and be surrounded
   by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
   Base 0 means to interpret the base from the string as an integer literal.
   >>> int('0b100', base=0)
   4

   .. py:method:: __repr__(self)

      Return repr(self).



.. py:data:: _local_space_registry
   

   

.. py:data:: _local_space_to_id
   

   

.. py:function:: _register_local_space(local_space)


.. py:function:: _get_local_space(local_spaces)


.. py:function:: _MPIVectorSpace_zeros(local_spaces=(None, ), count=0, reserve=0)


.. py:function:: _MPIVectorSpace_dim(local_spaces)


.. py:function:: _MPIVectorSpace_check_local_spaces(local_spaces, obj_id)


.. py:function:: _MPIVectorArray_append(self, other, remove_from_other, oind)


.. py:function:: _MPIVectorArray_copy(self, deep, ind)


.. py:function:: _MPIVectorArray_scal(self, alpha, ind)


.. py:function:: _MPIVectorArray_axpy(self, alpha, x, ind, xind)


.. py:function:: _MPIVectorArray_inner(self, other, ind, oind)


.. py:function:: _MPIVectorArray_pairwise_inner(self, other, ind, oind)


.. py:function:: _MPIVectorArray_lincomb(self, coefficients, ind)


.. py:function:: _MPIVectorArray_norm(self, ind)


.. py:function:: _MPIVectorArray_norm2(self, ind)


.. py:function:: _MPIVectorArray_dofs(self, dof_indices, ind)


.. py:function:: _MPIVectorArray_amax(self, ind)


.. py:function:: _MPIVectorArray_real(self, ind)


.. py:function:: _MPIVectorArray_imag(self, ind)


.. py:function:: _MPIVectorArray_conj(self, ind)


.. py:class:: MPIVectorArrayNoCommImpl(obj_id, space)

   Bases: :py:obj:`MPIVectorArrayImpl`

   Implementation of a |VectorArray|.

   The |VectorArray| base class defers all calls to interface methods to an
   internal `impl` object of this type. Indexing, error checking or non-standard
   inner products are handled by |VectorArray|. Possible indices are passed
   to the methods of :class:`VectorArrayImpl` as `ind`, `oind` or `xind`
   parameters. These can either be `None`, in case the array has not been indexed,
   a `slice` object, or a Python list of non-negative numbers.

   .. py:method:: inner(self, other, ind, oind)
      :abstractmethod:


   .. py:method:: pairwise_inner(self, other, ind, oind)
      :abstractmethod:


   .. py:method:: norm(self, ind)
      :abstractmethod:


   .. py:method:: norm2(self, ind)
      :abstractmethod:


   .. py:method:: dofs(self, dof_indices, ind)
      :abstractmethod:


   .. py:method:: amax(self, ind)
      :abstractmethod:



.. py:class:: MPIVectorArrayNoComm(space, impl, base=None, ind=None, _len=None)

   Bases: :py:obj:`MPIVectorArray`

   MPI distributed |VectorArray|.

   This is a subclass of :class:`MPIVectorArray` which
   overrides all communication requiring interface methods
   to raise `NotImplementedError`.

   This is mainly useful as a security measure when wrapping
   arrays for which simply calling the respective method
   on the wrapped arrays would lead to wrong results and
   :class:`MPIVectorArrayAutoComm` cannot be used either
   (for instance in the presence of shared DOFs).

   The associated |VectorSpace| is :class:`MPIVectorSpaceNoComm`.

   .. py:attribute:: impl_type
      

      


.. py:class:: MPIVectorSpaceNoComm(local_spaces)

   Bases: :py:obj:`MPIVectorSpace`

   |VectorSpace| for :class:`MPIVectorArrayNoComm`.

   .. py:attribute:: array_type
      

      

   .. py:method:: dim(self)
      :property:



.. py:class:: MPIVectorArrayAutoCommImpl(obj_id, space)

   Bases: :py:obj:`MPIVectorArrayImpl`

   Implementation of a |VectorArray|.

   The |VectorArray| base class defers all calls to interface methods to an
   internal `impl` object of this type. Indexing, error checking or non-standard
   inner products are handled by |VectorArray|. Possible indices are passed
   to the methods of :class:`VectorArrayImpl` as `ind`, `oind` or `xind`
   parameters. These can either be `None`, in case the array has not been indexed,
   a `slice` object, or a Python list of non-negative numbers.

   .. py:method:: inner(self, other, ind, oind)


   .. py:method:: pairwise_inner(self, other, ind, oind)


   .. py:method:: norm(self, ind)


   .. py:method:: norm2(self, ind)


   .. py:method:: dofs(self, dof_indices, ind)


   .. py:method:: amax(self, ind)



.. py:class:: MPIVectorArrayAutoComm(space, impl, base=None, ind=None, _len=None)

   Bases: :py:obj:`MPIVectorArray`

   MPI distributed |VectorArray|.

   This is a subclass of :class:`MPIVectorArray` which
   provides default implementations for all communication
   requiring interface methods for the case when the
   wrapped array is not MPI aware.

   Note, however, that depending on the model
   these default implementations might lead to wrong results
   (for instance in the presence of shared DOFs).

   The associated |VectorSpace| is :class:`MPIVectorSpaceAutoComm`.

   .. py:attribute:: impl_type
      

      


.. py:class:: MPIVectorSpaceAutoComm(local_spaces)

   Bases: :py:obj:`MPIVectorSpace`

   |VectorSpace| for :class:`MPIVectorArrayAutoComm`.

   .. py:attribute:: array_type
      

      

   .. py:method:: dim(self)
      :property:


   .. py:method:: _get_dims(self)



.. py:function:: _MPIVectorSpaceAutoComm_dim(local_spaces)


.. py:function:: _MPIVectorArrayAutoComm_inner(self, other, ind, oind)


.. py:function:: _MPIVectorArrayAutoComm_pairwise_inner(self, other, ind, oind)


.. py:function:: _MPIVectorArrayAutoComm_norm2(self, ind)


.. py:function:: _MPIVectorArrayAutoComm_dofs(self, offsets, dof_indices, ind)


.. py:function:: _MPIVectorArrayAutoComm_amax(self, ind)


.. py:function:: _indexed(array, ind)


