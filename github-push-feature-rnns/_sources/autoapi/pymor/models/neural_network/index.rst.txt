:mod:`pymor.models.neural_network`
==================================

.. py:module:: pymor.models.neural_network

.. autoapi-nested-parse::

   Remark on the documentation:

   Due to an issue in autoapi, the classes `NeuralNetworkStatefreeOutputModel`,
   `NeuralNetworkInstationaryModel`, `NeuralNetworkInstationaryStatefreeOutputModel`
   and `FullyConnectedNN` do not appear in the documentation,
   see https://github.com/pymor/pymor/issues/1343.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.models.neural_network.NeuralNetworkModel
   pymor.models.neural_network.NeuralNetworkStatefreeOutputModel
   pymor.models.neural_network.NeuralNetworkInstationaryModel
   pymor.models.neural_network.NeuralNetworkLSTMInstationaryModel
   pymor.models.neural_network.NeuralNetworkInstationaryStatefreeOutputModel
   pymor.models.neural_network.NeuralNetworkLSTMInstationaryStatefreeOutputModel
   pymor.models.neural_network.FullyConnectedNN
   pymor.models.neural_network.LongShortTermMemoryNN




.. py:class:: NeuralNetworkModel(neural_network, parameters={}, output_functional=None, products=None, error_estimator=None, visualizer=None, name=None)

   Bases: :py:obj:`pymor.models.interface.Model`

   Class for models of stationary problems that use artificial neural networks.

   This class implements a |Model| that uses a neural network for solving.

   .. admonition:: Parameters

       neural_network
           The neural network that approximates the mapping from parameter space
           to solution space. Should be an instance of
           :class:`~pymor.models.neural_network.FullyConnectedNN` with input size that
           matches the (total) number of parameters and output size equal to the
           dimension of the reduced space.
       parameters
           |Parameters| of the reduced order model (the same as used in the full-order
           model).
       output_functional
           |Operator| mapping a given solution to the model output. In many applications,
           this will be a |Functional|, i.e. an |Operator| mapping to scalars.
           This is not required, however.
       products
           A dict of inner product |Operators| defined on the discrete space the
           problem is posed on. For each product with key `'x'` a corresponding
           attribute `x_product`, as well as a norm method `x_norm` is added to
           the model.
       error_estimator
           An error estimator for the problem. This can be any object with
           an `estimate_error(U, mu, m)` method. If `error_estimator` is
           not `None`, an `estimate_error(U, mu)` method is added to the
           model which will call `error_estimator.estimate_error(U, mu, self)`.
       visualizer
           A visualizer for the problem. This can be any object with
           a `visualize(U, m, ...)` method. If `visualizer`
           is not `None`, a `visualize(U, *args, **kwargs)` method is added
           to the model which forwards its arguments to the
           visualizer's `visualize` method.
       name
           Name of the model.
           
   .. py:method:: _compute_solution(self, mu=None, **kwargs)

      Compute the model's solution for |parameter values| `mu`.

      This method is called by the default implementation of :meth:`compute`
      in :class:`pymor.models.interface.Model`.

      .. admonition:: Parameters

          mu
              |Parameter values| for which to compute the solution.
          kwargs
              Additional keyword arguments to customize how the solution is
              computed or to select additional data to be returned.
              
      .. admonition:: Returns

          |VectorArray| with the computed solution or a dict which at least
          must contain the key `'solution'`.
              


.. py:class:: NeuralNetworkStatefreeOutputModel(neural_network, parameters={}, error_estimator=None, name=None)

   Bases: :py:obj:`pymor.models.interface.Model`

   Class for models of the output of stationary problems that use ANNs.

   This class implements a |Model| that uses a neural network for solving for the output
   quantity.

   .. admonition:: Parameters

       neural_network
           The neural network that approximates the mapping from parameter space
           to output space. Should be an instance of
           :class:`~pymor.models.neural_network.FullyConnectedNN` with input size that
           matches the (total) number of parameters and output size equal to the
           dimension of the output space.
       parameters
           |Parameters| of the reduced order model (the same as used in the full-order
           model).
       error_estimator
           An error estimator for the problem. This can be any object with
           an `estimate_error(U, mu, m)` method. If `error_estimator` is
           not `None`, an `estimate_error(U, mu)` method is added to the
           model which will call `error_estimator.estimate_error(U, mu, self)`.
       name
           Name of the model.
           
   .. py:method:: _compute(self, solution=False, output=False, solution_d_mu=False, output_d_mu=False, solution_error_estimate=False, output_error_estimate=False, output_d_mu_return_array=False, mu=None, **kwargs)



.. py:class:: NeuralNetworkInstationaryModel(T, nt, neural_network, parameters={}, output_functional=None, products=None, error_estimator=None, visualizer=None, name=None)

   Bases: :py:obj:`pymor.models.interface.Model`

   Class for models of instationary problems that use artificial neural networks.

   This class implements a |Model| that uses a neural network for solving.

   .. admonition:: Parameters

       T
           The final time T.
       nt
           The number of time steps.
       neural_network
           The neural network that approximates the mapping from parameter space
           to solution space. Should be an instance of
           :class:`~pymor.models.neural_network.FullyConnectedNN` with input size that
           matches the (total) number of parameters and output size equal to the
           dimension of the reduced space.
       parameters
           |Parameters| of the reduced order model (the same as used in the full-order
           model).
       output_functional
           |Operator| mapping a given solution to the model output. In many applications,
           this will be a |Functional|, i.e. an |Operator| mapping to scalars.
           This is not required, however.
       products
           A dict of inner product |Operators| defined on the discrete space the
           problem is posed on. For each product with key `'x'` a corresponding
           attribute `x_product`, as well as a norm method `x_norm` is added to
           the model.
       error_estimator
           An error estimator for the problem. This can be any object with
           an `estimate_error(U, mu, m)` method. If `error_estimator` is
           not `None`, an `estimate_error(U, mu)` method is added to the
           model which will call `error_estimator.estimate_error(U, mu, self)`.
       visualizer
           A visualizer for the problem. This can be any object with
           a `visualize(U, m, ...)` method. If `visualizer`
           is not `None`, a `visualize(U, *args, **kwargs)` method is added
           to the model which forwards its arguments to the
           visualizer's `visualize` method.
       name
           Name of the model.
           
   .. py:method:: _compute_solution(self, mu=None, **kwargs)

      Compute the model's solution for |parameter values| `mu`.

      This method is called by the default implementation of :meth:`compute`
      in :class:`pymor.models.interface.Model`.

      .. admonition:: Parameters

          mu
              |Parameter values| for which to compute the solution.
          kwargs
              Additional keyword arguments to customize how the solution is
              computed or to select additional data to be returned.
              
      .. admonition:: Returns

          |VectorArray| with the computed solution or a dict which at least
          must contain the key `'solution'`.
              


.. py:class:: NeuralNetworkLSTMInstationaryModel(T, nt, neural_network, parameters={}, output_functional=None, products=None, error_estimator=None, visualizer=None, name=None)

   Bases: :py:obj:`pymor.models.interface.Model`

   Class for models of instationary problems that use LSTM neural networks.

   This class implements a |Model| that uses a LSTM neural network for solving.

   .. admonition:: Parameters

       T
           The final time T.
       nt
           The number of time steps.
       neural_network
           The neural network that approximates the mapping from parameter space
           to solution space. Should be an instance of
           :class:`~pymor.models.neural_network.LongShortTermMemoryNN` with input
           size that matches the (total) number of parameters and output size equal
           to the dimension of the reduced space.
       parameters
           |Parameters| of the reduced order model (the same as used in the full-order
           model).
       output_functional
           |Operator| mapping a given solution to the model output. In many applications,
           this will be a |Functional|, i.e. an |Operator| mapping to scalars.
           This is not required, however.
       products
           A dict of inner product |Operators| defined on the discrete space the
           problem is posed on. For each product with key `'x'` a corresponding
           attribute `x_product`, as well as a norm method `x_norm` is added to
           the model.
       error_estimator
           An error estimator for the problem. This can be any object with
           an `estimate_error(U, mu, m)` method. If `error_estimator` is
           not `None`, an `estimate_error(U, mu)` method is added to the
           model which will call `error_estimator.estimate_error(U, mu, self)`.
       visualizer
           A visualizer for the problem. This can be any object with
           a `visualize(U, m, ...)` method. If `visualizer`
           is not `None`, a `visualize(U, *args, **kwargs)` method is added
           to the model which forwards its arguments to the
           visualizer's `visualize` method.
       name
           Name of the model.
           
   .. py:method:: _compute_solution(self, mu=None, **kwargs)

      Compute the model's solution for |parameter values| `mu`.

      This method is called by the default implementation of :meth:`compute`
      in :class:`pymor.models.interface.Model`.

      .. admonition:: Parameters

          mu
              |Parameter values| for which to compute the solution.
          kwargs
              Additional keyword arguments to customize how the solution is
              computed or to select additional data to be returned.
              
      .. admonition:: Returns

          |VectorArray| with the computed solution or a dict which at least
          must contain the key `'solution'`.
              


.. py:class:: NeuralNetworkInstationaryStatefreeOutputModel(T, nt, neural_network, parameters={}, error_estimator=None, name=None)

   Bases: :py:obj:`pymor.models.interface.Model`

   Class for models of the output of instationary problems that use ANNs.

   This class implements a |Model| that uses a neural network for solving for the output
   quantity in the instationary case.

   .. admonition:: Parameters

       T
           The final time T.
       nt
           The number of time steps.
       neural_network
           The neural network that approximates the mapping from parameter space
           to output space. Should be an instance of
           :class:`~pymor.models.neural_network.FullyConnectedNN` with input size that
           matches the (total) number of parameters and output size equal to the
           dimension of the output space.
       parameters
           |Parameters| of the reduced order model (the same as used in the full-order
           model).
       error_estimator
           An error estimator for the problem. This can be any object with
           an `estimate_error(U, mu, m)` method. If `error_estimator` is
           not `None`, an `estimate_error(U, mu)` method is added to the
           model which will call `error_estimator.estimate_error(U, mu, self)`.
       name
           Name of the model.
           
   .. py:method:: _compute(self, solution=False, output=False, solution_d_mu=False, output_d_mu=False, solution_error_estimate=False, output_error_estimate=False, output_d_mu_return_array=False, mu=None, **kwargs)



.. py:class:: NeuralNetworkLSTMInstationaryStatefreeOutputModel(T, nt, neural_network, parameters={}, error_estimator=None, name=None)

   Bases: :py:obj:`pymor.models.interface.Model`

   Class for models of the output of instationary problems that use LSTM neural networks.

   This class implements a |Model| that uses a LSTM neural network for solving for the output
   quantity in the instationary case.

   .. admonition:: Parameters

       T
           The final time T.
       nt
           The number of time steps.
       neural_network
           The neural network that approximates the mapping from parameter space
           to solution space. Should be an instance of
           :class:`~pymor.models.neural_network.LongShortTermMemoryNN` with input
           size that matches the (total) number of parameters and output size equal
           to the dimension of the reduced space.
       parameters
           |Parameters| of the reduced order model (the same as used in the full-order
           model).
       error_estimator
           An error estimator for the problem. This can be any object with
           an `estimate_error(U, mu, m)` method. If `error_estimator` is
           not `None`, an `estimate_error(U, mu)` method is added to the
           model which will call `error_estimator.estimate_error(U, mu, self)`.
       name
           Name of the model.
           
   .. py:method:: _compute(self, solution=False, output=False, solution_d_mu=False, output_d_mu=False, solution_error_estimate=False, output_error_estimate=False, output_d_mu_return_array=False, mu=None, **kwargs)



.. py:class:: FullyConnectedNN(layer_sizes, activation_function=torch.tanh)

   Bases: :py:obj:`torch.nn.Module`, :py:obj:`pymor.core.base.BasicObject`

   Class for neural networks with fully connected layers.

   This class implements neural networks consisting of linear and fully connected layers.
   Furthermore, the same activation function is used between each layer, except for the
   last one where no activation function is applied.

   .. admonition:: Parameters

       layer_sizes
           List of sizes (i.e. number of neurons) for the layers of the neural network.
       activation_function
           Function to use as activation function between the single layers.
           
   .. py:method:: forward(self, x)

      Performs the forward pass through the neural network.

      Applies the weights in the linear layers and passes the outcomes to the
      activation function.

      .. admonition:: Parameters

          x
              Input for the neural network.
              
      .. admonition:: Returns

          The output of the neural network for the input x.
              


.. py:class:: LongShortTermMemoryNN(input_dimension, hidden_dimension=10, output_dimension=1, number_layers=1)

   Bases: :py:obj:`torch.nn.Module`, :py:obj:`pymor.core.base.BasicObject`

   Class for Long Short-Term Memory neural networks (LSTMs).

   This class implements neural networks for time series of input data of arbitrary length.
   The same LSTMCell is applied in each timestep and the hidden state of the former LSTMCell
   is used as input hidden state for the next cell.

   .. admonition:: Parameters

       input_dimension
           Dimension of the input (at a fixed time instance) of the LSTM.
       hidden_dimension
           Dimension of the hidden state of the LSTM.
       output_dimension
           Dimension of the output of the LSTM (must be smaller than `hidden_dimension`).
       number_layers
           Number of layers in the LSTM (if greater than 1, a stacked LSTM is used).
           
   .. py:method:: forward(self, x)

      Performs the forward pass through the neural network.

      Initializes the hidden and cell states and applies the weights of the LSTM layers
      followed by the output layer that maps from the hidden state to the output state.

      .. admonition:: Parameters

          x
              Input for the neural network.
              
      .. admonition:: Returns

          The output of the neural network for the input x.
              


