:mod:`pymor.core.exceptions`
============================

.. py:module:: pymor.core.exceptions


Module Contents
---------------

.. py:data:: warn
   

   

.. py:exception:: ConstError

   Bases: :py:obj:`Exception`

   I get thrown when you try to add a new member to a locked class instance.


.. py:exception:: AccuracyError

   Bases: :py:obj:`Exception`

   Is raised if the result of a computation is inaccurate.


.. py:exception:: ExtensionError

   Bases: :py:obj:`Exception`

   Is raised if a (basis) extension algorithm fails.

   This will mostly happen during a basis extension when the new snapshot is already
   in the span of the basis.


.. py:exception:: InversionError

   Bases: :py:obj:`Exception`

   Is raised if an operator inversion algorithm fails.


.. py:exception:: LinAlgError

   Bases: :py:obj:`Exception`

   Is raised if a linear algebra operation fails.


.. py:exception:: NewtonError

   Bases: :py:obj:`Exception`

   Is raised if the Newton algorithm fails to converge.


.. py:exception:: CacheKeyGenerationError

   Bases: :py:obj:`Exception`

   Is raised when cache key generation fails due to unsupported arguments.


.. py:exception:: GmshMissing

   Bases: :py:obj:`Exception`

   Is raised when a Gmsh is not found.


.. py:exception:: MeshioMissing

   Bases: :py:obj:`Exception`

   Is raised when meshio is not available.


.. py:exception:: ImageCollectionError(op)

   Bases: :py:obj:`Exception`

   Is raised when a pymor.algorithms.image.estimate_image fails for given operator.


.. py:exception:: NeuralNetworkTrainingFailed

   Bases: :py:obj:`Exception`

   Is raised when training of a neural network fails.


.. py:exception:: DependencyMissing(dependency, msg=None)

   Bases: :py:obj:`ImportError`

   Raised when optional packages are required but are not installed.


.. py:exception:: QtMissing(msg=None)

   Bases: :py:obj:`DependencyMissing`

   Raise me where having importable Qt bindings is non-optional


.. py:exception:: TorchMissing(msg=None)

   Bases: :py:obj:`DependencyMissing`

   Raise me where having importable torch version is non-optional


.. py:exception:: RuleNotMatchingError

   Bases: :py:obj:`NotImplementedError`

   Method or function hasn't been implemented yet.


.. py:exception:: NoMatchingRuleError(obj)

   Bases: :py:obj:`NotImplementedError`

   Method or function hasn't been implemented yet.


.. py:exception:: IOLibsMissing(msg=None)

   Bases: :py:obj:`ImportError`

   Import can't find module, or can't find name in module.


.. py:exception:: UnpicklableError(cls)

   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.

   .. py:method:: __str__(self)

      Return str(self).



