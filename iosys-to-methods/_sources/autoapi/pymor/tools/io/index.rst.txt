:mod:`pymor.tools.io`
=====================

.. py:module:: pymor.tools.io


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.tools.io._loadmat
   pymor.tools.io._savemat
   pymor.tools.io._mmread
   pymor.tools.io._mmwrite
   pymor.tools.io._load
   pymor.tools.io._save
   pymor.tools.io._savez
   pymor.tools.io._loadtxt
   pymor.tools.io._savetxt
   pymor.tools.io._get_file_extension
   pymor.tools.io.load_matrix
   pymor.tools.io.save_matrix
   pymor.tools.io.SafeTemporaryFileName
   pymor.tools.io.change_to_directory
   pymor.tools.io.file_owned_by_current_user



Attributes
~~~~~~~~~~

.. autoapisummary::

   pymor.tools.io.MatrixType


.. data:: MatrixType
   

   

.. function:: _loadmat(path: pathlib.Path, key: Optional[str] = None) -> MatrixType


.. function:: _savemat(path: pathlib.Path, matrix: MatrixType, key: Optional[str] = None) -> None


.. function:: _mmread(path: pathlib.Path, key: Optional[str] = None) -> MatrixType


.. function:: _mmwrite(path: pathlib.Path, matrix: MatrixType, key: Optional[str] = None) -> None


.. function:: _load(path: pathlib.Path, key: Optional[str] = None) -> MatrixType


.. function:: _save(path: pathlib.Path, matrix: MatrixType, key: Optional[str] = None) -> None


.. function:: _savez(path: pathlib.Path, matrix: MatrixType, key: Optional[str] = None) -> None


.. function:: _loadtxt(path: pathlib.Path, key: Optional[str] = None) -> MatrixType


.. function:: _savetxt(path: pathlib.Path, matrix: MatrixType, key: Optional[str] = None) -> None


.. function:: _get_file_extension(path: pathlib.Path) -> str


.. function:: load_matrix(path: Union[str, pathlib.Path], key: Optional[str] = None) -> Union[numpy.typing.ArrayLike, scipy.sparse.spmatrix]

   Load matrix from file.

   .. admonition:: Parameters

       path
           Path to the file.
       key
           Key of the matrix (only for NPY, NPZ, and MATLAB files).
           
   .. admonition:: Returns

       matrix
           |NumPy array| of |SciPy spmatrix|.
           
   .. admonition:: Raises

       IOError
           If loading fails.
           


.. function:: save_matrix(path: Union[str, pathlib.Path], matrix: Union[numpy.typing.ArrayLike, scipy.sparse.spmatrix], key: Optional[str] = None) -> None

   Save matrix to file.

   .. admonition:: Parameters

       path
           Path to the file.
       matrix
           Matrix to save.
       key
           Key of the matrix (only for NPY, NPZ, and MATLAB files).
           
   .. admonition:: Raises

       IOError
           If saving fails.
           


.. function:: SafeTemporaryFileName(name=None, parent_dir=None)

   Cross~platform safe equivalent of re-opening a NamedTemporaryFile.

   Creates an automatically cleaned up temporary directory with a single file therein.

   .. admonition:: Parameters

       name
           Filename component, defaults to 'temp_file'.
       dir
           The parent dir of the new temporary directory.
           Defaults to tempfile.gettempdir().
           


.. function:: change_to_directory(name)

   Change current working directory to `name` for the scope of the context.


.. function:: file_owned_by_current_user(filename)


