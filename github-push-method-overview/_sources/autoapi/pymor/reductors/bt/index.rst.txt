:mod:`pymor.reductors.bt`
=========================

.. py:module:: pymor.reductors.bt


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.reductors.bt.BRBTReductor
   pymor.reductors.bt.BTReductor
   pymor.reductors.bt.FDBTReductor
   pymor.reductors.bt.GenericBTReductor
   pymor.reductors.bt.LQGBTReductor




.. py:class:: BRBTReductor(fom, gamma=1, mu=None, solver_options=None)

   Bases: :py:obj:`GenericBTReductor`

   Bounded Real (BR) Balanced Truncation reductor.

   See :cite:`A05` (Section 7.5.3) and :cite:`OJ88`.

   .. admonition:: Parameters

       fom
           The full-order |LTIModel| to reduce.
       gamma
           Upper bound for the :math:`\mathcal{H}_\infty`-norm.
       mu
           |Parameter values|.
       solver_options
           The solver options to use to solve the positive Riccati equations.
           




   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.reductors.bt.BRBTReductor._gramians
         pymor.reductors.bt.BRBTReductor.error_bounds



   .. py:method:: _gramians(self)

      Return low-rank Cholesky factors of Gramians.


   .. py:method:: error_bounds(self)

      Returns error bounds for all possible reduced orders.



.. py:class:: BTReductor(fom, mu=None)

   Bases: :py:obj:`GenericBTReductor`

   Standard (Lyapunov) Balanced Truncation reductor.

   See Section 7.3 in :cite:`A05`.

   .. admonition:: Parameters

       fom
           The full-order |LTIModel| to reduce.
       mu
           |Parameter values|.
           




   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.reductors.bt.BTReductor._gramians
         pymor.reductors.bt.BTReductor.error_bounds



   .. py:method:: _gramians(self)

      Return low-rank Cholesky factors of Gramians.


   .. py:method:: error_bounds(self)

      Returns error bounds for all possible reduced orders.



.. py:class:: FDBTReductor(fom, ast_pole_data=None, mu=None, solver_options=None)

   Bases: :py:obj:`GenericBTReductor`

   Balanced Truncation reductor using frequency domain representation of Gramians.

   See :cite:`ZSW99`.

   .. admonition:: Parameters

       fom
           The full-order |LTIModel| to reduce.
       ast_pole_data
           Can be:
           
           - dictionary of parameters for :func:`~pymor.algorithms.eigs.eigs`,
           - list of anti-stable eigenvalues (scalars),
           - tuple `(lev, ew, rev)` where `ew` contains the anti-stable eigenvalues
             and `lev` and `rev` are |VectorArrays| representing the eigenvectors.
           - `None` if anti-stable eigenvalues should be computed via dense methods.
       mu
           |Parameter values|.
           




   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.reductors.bt.FDBTReductor._gramians
         pymor.reductors.bt.FDBTReductor.error_bounds



   .. py:method:: _gramians(self)

      Return low-rank Cholesky factors of Gramians.


   .. py:method:: error_bounds(self)

      L-infinity error bounds for reduced order models.



.. py:class:: GenericBTReductor(fom, mu=None)

   Bases: :py:obj:`pymor.core.base.BasicObject`

   Generic Balanced Truncation reductor.

   .. admonition:: Parameters

       fom
           The full-order |LTIModel| to reduce.
       mu
           |Parameter values|.
           




   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.reductors.bt.GenericBTReductor._gramians
         pymor.reductors.bt.GenericBTReductor._sv_U_V
         pymor.reductors.bt.GenericBTReductor.error_bounds
         pymor.reductors.bt.GenericBTReductor.reconstruct
         pymor.reductors.bt.GenericBTReductor.reduce



   .. py:method:: _gramians(self)
      :abstractmethod:

      Return low-rank Cholesky factors of Gramians.


   .. py:method:: _sv_U_V(self)

      Return singular values and vectors.


   .. py:method:: error_bounds(self)
      :abstractmethod:

      Returns error bounds for all possible reduced orders.


   .. py:method:: reconstruct(self, u)

      Reconstruct high-dimensional vector from reduced vector `u`.


   .. py:method:: reduce(self, r=None, tol=None, projection='bfsr')

      Generic Balanced Truncation.

      .. admonition:: Parameters

          r
              Order of the reduced model if `tol` is `None`, maximum order if `tol` is specified.
          tol
              Tolerance for the error bound if `r` is `None`.
          projection
              Projection method used:
              
              - `'sr'`: square root method
              - `'bfsr'`: balancing-free square root method (default, since it avoids scaling by
                singular values and orthogonalizes the projection matrices, which might make it more
                accurate than the square root method)
              - `'biorth'`: like the balancing-free square root method, except it biorthogonalizes the
                projection matrices (using :func:`~pymor.algorithms.gram_schmidt.gram_schmidt_biorth`)
              
      .. admonition:: Returns

          rom
              Reduced-order model.
              


.. py:class:: LQGBTReductor(fom, mu=None, solver_options=None)

   Bases: :py:obj:`GenericBTReductor`

   Linear Quadratic Gaussian (LQG) Balanced Truncation reductor.

   See Section 3 in :cite:`MG91`.

   .. admonition:: Parameters

       fom
           The full-order |LTIModel| to reduce.
       mu
           |Parameter values|.
       solver_options
           The solver options to use to solve the Riccati equations.
           




   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.reductors.bt.LQGBTReductor._gramians
         pymor.reductors.bt.LQGBTReductor.error_bounds



   .. py:method:: _gramians(self)

      Return low-rank Cholesky factors of Gramians.


   .. py:method:: error_bounds(self)

      Returns error bounds for all possible reduced orders.



