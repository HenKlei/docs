:mod:`pymor.reductors.h2`
=========================

.. py:module:: pymor.reductors.h2

.. autoapi-nested-parse::

   Reductors based on H2-norm.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.reductors.h2.GenericIRKAReductor
   pymor.reductors.h2.IRKAReductor
   pymor.reductors.h2.OneSidedIRKAReductor
   pymor.reductors.h2.TSIAReductor
   pymor.reductors.h2.TFIRKAReductor
   pymor.reductors.h2.GapIRKAReductor




.. py:class:: GenericIRKAReductor(fom, mu=None)

   Bases: :py:obj:`pymor.core.base.BasicObject`

   Generic IRKA related reductor.

   .. admonition:: Parameters

       fom
           The full-order |Model| to reduce.
       mu
           |Parameter values|.
           
   **Methods**

   .. autoapisummary::
      :nosignatures:

      pymor.reductors.h2.GenericIRKAReductor._clear_lists
      pymor.reductors.h2.GenericIRKAReductor.reconstruct
      pymor.reductors.h2.GenericIRKAReductor._check_rom0_params
      pymor.reductors.h2.GenericIRKAReductor._check_common_args
      pymor.reductors.h2.GenericIRKAReductor._order_to_sigma_b_c
      pymor.reductors.h2.GenericIRKAReductor._rom_to_sigma_b_c
      pymor.reductors.h2.GenericIRKAReductor._rom0_params_to_sigma_b_c
      pymor.reductors.h2.GenericIRKAReductor._rom0_params_to_rom
      pymor.reductors.h2.GenericIRKAReductor._store_sigma_b_c
      pymor.reductors.h2.GenericIRKAReductor._update_conv_data
      pymor.reductors.h2.GenericIRKAReductor._compute_conv_crit
      pymor.reductors.h2.GenericIRKAReductor._compute_error


   .. py:method:: _clear_lists(self)


   .. py:method:: reconstruct(self, u)

      Reconstruct high-dimensional vector from reduced vector `u`.


   .. py:method:: _check_rom0_params(self, rom0_params)


   .. py:method:: _check_common_args(tol, maxit, num_prev, conv_crit)
      :staticmethod:


   .. py:method:: _order_to_sigma_b_c(self, r)


   .. py:method:: _rom_to_sigma_b_c(rom, force_sigma_in_rhp)
      :staticmethod:


   .. py:method:: _rom0_params_to_sigma_b_c(self, rom0_params, force_sigma_in_rhp)


   .. py:method:: _rom0_params_to_rom(self, rom0_params)


   .. py:method:: _store_sigma_b_c(self, sigma, b, c)


   .. py:method:: _update_conv_data(self, sigma, rom, conv_crit)


   .. py:method:: _compute_conv_crit(self, rom, conv_crit, it)


   .. py:method:: _compute_error(self, rom, it, compute_errors)



.. py:class:: IRKAReductor(fom, mu=None)

   Bases: :py:obj:`GenericIRKAReductor`

   Iterative Rational Krylov Algorithm reductor.

   .. admonition:: Parameters

       fom
           The full-order |LTIModel| to reduce.
       mu
           |Parameter values|.
           
   **Methods**

   .. autoapisummary::
      :nosignatures:

      pymor.reductors.h2.IRKAReductor.reduce


   .. py:method:: reduce(self, rom0_params, tol=0.0001, maxit=100, num_prev=1, force_sigma_in_rhp=False, projection='orth', conv_crit='sigma', compute_errors=False)

      Reduce using IRKA.

      See :cite:`GAB08` (Algorithm 4.1) and :cite:`ABG10` (Algorithm 1).

      .. admonition:: Parameters

          rom0_params
              Can be:
              
              - order of the reduced model (a positive integer),
              - initial interpolation points (a 1D |NumPy array|),
              - dict with `'sigma'`, `'b'`, `'c'` as keys mapping to
                initial interpolation points (a 1D |NumPy array|), right
                tangential directions (|NumPy array| of shape
                `(len(sigma), fom.dim_input)`), and left tangential directions
                (|NumPy array| of shape `(len(sigma), fom.dim_input)`),
              - initial reduced-order model (|LTIModel|).
              
              If the order of reduced model is given, initial
              interpolation data is generated randomly.
          tol
              Tolerance for the convergence criterion.
          maxit
              Maximum number of iterations.
          num_prev
              Number of previous iterations to compare the current
              iteration to. Larger number can avoid occasional cyclic
              behavior of IRKA.
          force_sigma_in_rhp
              If `False`, new interpolation are reflections of the current
              reduced-order model's poles. Otherwise, only poles in the
              left half-plane are reflected.
          projection
              Projection method:
              
              - `'orth'`: projection matrices are orthogonalized with
                respect to the Euclidean inner product
              - `'biorth'`: projection matrices are biorthogolized with
                respect to the E product
              - `'arnoldi'`: projection matrices are orthogonalized using
                the Arnoldi process (available only for SISO systems).
          conv_crit
              Convergence criterion:
              
              - `'sigma'`: relative change in interpolation points
              - `'h2'`: relative :math:`\mathcal{H}_2` distance of
                reduced-order models
          compute_errors
              Should the relative :math:`\mathcal{H}_2`-errors of
              intermediate reduced-order models be computed.
              
              .. warning::
                  Computing :math:`\mathcal{H}_2`-errors is expensive. Use
                  this option only if necessary.
              
      .. admonition:: Returns

          rom
              Reduced |LTIModel| model.
              


.. py:class:: OneSidedIRKAReductor(fom, version, mu=None)

   Bases: :py:obj:`GenericIRKAReductor`

   One-Sided Iterative Rational Krylov Algorithm reductor.

   .. admonition:: Parameters

       fom
           The full-order |LTIModel| to reduce.
       version
           Version of the one-sided IRKA:
           
           - `'V'`: Galerkin projection using the input Krylov subspace,
           - `'W'`: Galerkin projection using the output Krylov subspace.
       mu
           |Parameter values|.
           
   **Methods**

   .. autoapisummary::
      :nosignatures:

      pymor.reductors.h2.OneSidedIRKAReductor.reduce
      pymor.reductors.h2.OneSidedIRKAReductor._set_V_reductor


   .. py:method:: reduce(self, rom0_params, tol=0.0001, maxit=100, num_prev=1, force_sigma_in_rhp=False, projection='orth', conv_crit='sigma', compute_errors=False)

      Reduce using one-sided IRKA.

      .. admonition:: Parameters

          rom0_params
              Can be:
              
              - order of the reduced model (a positive integer),
              - initial interpolation points (a 1D |NumPy array|),
              - dict with `'sigma'`, `'b'`, `'c'` as keys mapping to
                initial interpolation points (a 1D |NumPy array|), right
                tangential directions (|NumPy array| of shape
                `(len(sigma), fom.dim_input)`), and left tangential directions
                (|NumPy array| of shape `(len(sigma), fom.dim_input)`),
              - initial reduced-order model (|LTIModel|).
              
              If the order of reduced model is given, initial
              interpolation data is generated randomly.
          tol
              Tolerance for the largest change in interpolation points.
          maxit
              Maximum number of iterations.
          num_prev
              Number of previous iterations to compare the current
              iteration to. A larger number can avoid occasional cyclic
              behavior.
          force_sigma_in_rhp
              If `False`, new interpolation are reflections of the current
              reduced-order model's poles. Otherwise, only poles in the
              left half-plane are reflected.
          projection
              Projection method:
              
              - `'orth'`: projection matrix is orthogonalized with respect
                to the Euclidean inner product,
              - `'Eorth'`: projection matrix is orthogonalized with
                respect to the E product.
          conv_crit
              Convergence criterion:
              
              - `'sigma'`: relative change in interpolation points,
              - `'h2'`: relative :math:`\mathcal{H}_2` distance of
                reduced-order models.
          compute_errors
              Should the relative :math:`\mathcal{H}_2`-errors of
              intermediate reduced-order models be computed.
              
              .. warning::
                  Computing :math:`\mathcal{H}_2`-errors is expensive. Use
                  this option only if necessary.
              
      .. admonition:: Returns

          rom
              Reduced |LTIModel| model.
              

   .. py:method:: _set_V_reductor(self, sigma, b, c, projection)



.. py:class:: TSIAReductor(fom, mu=None)

   Bases: :py:obj:`GenericIRKAReductor`

   Two-Sided Iteration Algorithm reductor.

   .. admonition:: Parameters

       fom
           The full-order |LTIModel| to reduce.
       mu
           |Parameter values|.
           
   **Methods**

   .. autoapisummary::
      :nosignatures:

      pymor.reductors.h2.TSIAReductor.reduce
      pymor.reductors.h2.TSIAReductor._set_V_W_reductor


   .. py:method:: reduce(self, rom0_params, tol=0.0001, maxit=100, num_prev=1, projection='orth', conv_crit='sigma', compute_errors=False)

      Reduce using TSIA.

      See :cite:`XZ11` (Algorithm 1) and :cite:`BKS11`.

      In exact arithmetic, TSIA is equivalent to IRKA (under some
      assumptions on the poles of the reduced model). The main
      difference in implementation is that TSIA computes the Schur
      decomposition of the reduced matrices, while IRKA computes the
      eigenvalue decomposition. Therefore, TSIA might behave better
      for non-normal reduced matrices.

      .. admonition:: Parameters

          rom0_params
              Can be:
              
              - order of the reduced model (a positive integer),
              - initial interpolation points (a 1D |NumPy array|),
              - dict with `'sigma'`, `'b'`, `'c'` as keys mapping to
                initial interpolation points (a 1D |NumPy array|), right
                tangential directions (|NumPy array| of shape
                `(len(sigma), fom.dim_input)`), and left tangential directions
                (|NumPy array| of shape `(len(sigma), fom.dim_input)`),
              - initial reduced-order model (|LTIModel|).
              
              If the order of reduced model is given, initial
              interpolation data is generated randomly.
          tol
              Tolerance for the convergence criterion.
          maxit
              Maximum number of iterations.
          num_prev
              Number of previous iterations to compare the current
              iteration to. Larger number can avoid occasional cyclic
              behavior of TSIA.
          projection
              Projection method:
              
              - `'orth'`: projection matrices are orthogonalized with
                respect to the Euclidean inner product
              - `'biorth'`: projection matrices are biorthogolized with
                respect to the E product
          conv_crit
              Convergence criterion:
              
              - `'sigma'`: relative change in interpolation points
              - `'h2'`: relative :math:`\mathcal{H}_2` distance of
                reduced-order models
          compute_errors
              Should the relative :math:`\mathcal{H}_2`-errors of
              intermediate reduced-order models be computed.
              
              .. warning::
                  Computing :math:`\mathcal{H}_2`-errors is expensive. Use
                  this option only if necessary.
              
      .. admonition:: Returns

          rom
              Reduced |LTIModel|.
              

   .. py:method:: _set_V_W_reductor(self, rom, projection)



.. py:class:: TFIRKAReductor(fom, mu=None)

   Bases: :py:obj:`GenericIRKAReductor`

   Realization-independent IRKA reductor.

   See :cite:`BG12`.

   .. admonition:: Parameters

       fom
           |TransferFunction| or |Model| with a `transfer_function` attribute,
           with `eval_tf` and `eval_dtf` methods that should be defined at least
           over the open right half of the complex plane.
       mu
           |Parameter values|.
           
   **Methods**

   .. autoapisummary::
      :nosignatures:

      pymor.reductors.h2.TFIRKAReductor.reduce
      pymor.reductors.h2.TFIRKAReductor.reconstruct


   .. py:method:: reduce(self, rom0_params, tol=0.0001, maxit=100, num_prev=1, force_sigma_in_rhp=False, conv_crit='sigma', compute_errors=False)

      Reduce using TF-IRKA.

      .. admonition:: Parameters

          rom0_params
              Can be:
              
              - order of the reduced model (a positive integer),
              - initial interpolation points (a 1D |NumPy array|),
              - dict with `'sigma'`, `'b'`, `'c'` as keys mapping to
                initial interpolation points (a 1D |NumPy array|), right
                tangential directions (|NumPy array| of shape
                `(len(sigma), fom.dim_input)`), and left tangential directions
                (|NumPy array| of shape `(len(sigma), fom.dim_input)`),
              - initial reduced-order model (|LTIModel|).
              
              If the order of reduced model is given, initial
              interpolation data is generated randomly.
          tol
              Tolerance for the convergence criterion.
          maxit
              Maximum number of iterations.
          num_prev
              Number of previous iterations to compare the current
              iteration to. Larger number can avoid occasional cyclic
              behavior of TF-IRKA.
          force_sigma_in_rhp
              If `False`, new interpolation are reflections of the current
              reduced-order model's poles. Otherwise, only poles in the
              left half-plane are reflected.
          conv_crit
              Convergence criterion:
              
              - `'sigma'`: relative change in interpolation points
              - `'h2'`: relative :math:`\mathcal{H}_2` distance of
                reduced-order models
          compute_errors
              Should the relative :math:`\mathcal{H}_2`-errors of
              intermediate reduced-order models be computed.
              
              .. warning::
                  Computing :math:`\mathcal{H}_2`-errors is expensive. Use
                  this option only if necessary.
              
      .. admonition:: Returns

          rom
              Reduced |LTIModel| model.
              

   .. py:method:: reconstruct(self, u)

      Reconstruct high-dimensional vector from reduced vector `u`.



.. py:class:: GapIRKAReductor(fom, mu=None, solver_options=None)

   Bases: :py:obj:`GenericIRKAReductor`

   Gap-IRKA reductor.

   .. admonition:: Parameters

       fom
           The full-order |LTIModel| to reduce.
       mu
           |Parameter|.
           
   **Methods**

   .. autoapisummary::
      :nosignatures:

      pymor.reductors.h2.GapIRKAReductor.reduce
      pymor.reductors.h2.GapIRKAReductor._rom0_params_to_sigma_b_c
      pymor.reductors.h2.GapIRKAReductor._unstable_rom_to_sigma_b_c
      pymor.reductors.h2.GapIRKAReductor._unstable_lti_to_poles_b_c
      pymor.reductors.h2.GapIRKAReductor._update_conv_data
      pymor.reductors.h2.GapIRKAReductor._compute_conv_crit


   .. py:method:: reduce(self, rom0_params, tol=0.0001, maxit=100, num_prev=1, conv_crit='sigma', projection='orth')

      Reduce using gap-IRKA.

      See :cite:`BBG19` Algorithm 1.

      .. admonition:: Parameters

          rom0_params
              Can be:
              
              - order of the reduced model (a positive integer),
              - initial interpolation points (a 1D |NumPy array|),
              - dict with `'sigma'`, `'b'`, `'c'` as keys mapping to
                initial interpolation points (a 1D |NumPy array|), right
                tangential directions (|VectorArray| from
                `fom.input_space`), and left tangential directions
                (|VectorArray| from `fom.output_space`), all of the same
                length (the order of the reduced model),
              - initial reduced-order model (|LTIModel|).
              
              If the order of reduced model is given, initial
              interpolation data is generated randomly.
          tol
              Tolerance for the convergence criterion.
          maxit
              Maximum number of iterations.
          num_prev
              Number of previous iterations to compare the current
              iteration to. A larger number can avoid occasional cyclic
              behavior.
          conv_crit
              Convergence criterion:
              
              - `'sigma'`: relative change in interpolation points
              - `'htwogap'`: :math:`\mathcal{H}_2-gap` distance of
                reduced-order models divided by :math:`\mathcal{L}_2`
                norm of new reduced-order model
              - `'ltwo'`: relative :math:`\mathcal{L}_2` distance of
                reduced-order models
          projection
              Projection method:
              
              - `'orth'`: projection matrix is orthogonalized with respect
                to the Euclidean inner product,
              - `'biorth'`: projection matrix is orthogonalized with
                respect to the E product.
              
      .. admonition:: Returns

          rom
              Reduced |LTIModel| model.
              

   .. py:method:: _rom0_params_to_sigma_b_c(self, rom0_params)


   .. py:method:: _unstable_rom_to_sigma_b_c(self, rom)


   .. py:method:: _unstable_lti_to_poles_b_c(self, rom)


   .. py:method:: _update_conv_data(self, sigma, gap_rom, rom, conv_crit)


   .. py:method:: _compute_conv_crit(self, rom, conv_crit, it)



