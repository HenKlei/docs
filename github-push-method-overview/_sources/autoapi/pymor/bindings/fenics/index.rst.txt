:mod:`pymor.bindings.fenics`
============================

.. py:module:: pymor.bindings.fenics


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.bindings.fenics.ComplexifiedFenicsVector
   pymor.bindings.fenics.FenicsMatrixOperator
   pymor.bindings.fenics.FenicsOperator
   pymor.bindings.fenics.FenicsVector
   pymor.bindings.fenics.FenicsVectorSpace
   pymor.bindings.fenics.FenicsVisualizer
   pymor.bindings.fenics.RestrictedFenicsOperator



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.bindings.fenics._solver_options
   pymor.bindings.fenics.compute_parent_facet_indices



Attributes
~~~~~~~~~~

.. autoapisummary::

   pymor.bindings.fenics._DEFAULT_SOVLER


.. py:class:: ComplexifiedFenicsVector(real_part, imag_part)

   Bases: :py:obj:`pymor.vectorarrays.list.ComplexifiedVector`

   Interface for vectors used in conjunction with |ListVectorArray|.

   This interface must be satisfied by the individual entries of the
   vector `list` managed by |ListVectorArray|. All interface methods
   have a direct counterpart in the |VectorArray| interface.





   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.bindings.fenics.ComplexifiedFenicsVector.amax



   .. py:method:: amax(self)



.. py:class:: FenicsMatrixOperator(matrix, source_space, range_space, solver_options=None, name=None)

   Bases: :py:obj:`pymor.operators.list.LinearComplexifiedListVectorArrayOperatorBase`

   Wraps a FEniCS matrix as an |Operator|.





   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.bindings.fenics.FenicsMatrixOperator._apply_inverse
         pymor.bindings.fenics.FenicsMatrixOperator._assemble_lincomb
         pymor.bindings.fenics.FenicsMatrixOperator._create_solver
         pymor.bindings.fenics.FenicsMatrixOperator._real_apply_adjoint_one_vector
         pymor.bindings.fenics.FenicsMatrixOperator._real_apply_inverse_adjoint_one_vector
         pymor.bindings.fenics.FenicsMatrixOperator._real_apply_inverse_one_vector
         pymor.bindings.fenics.FenicsMatrixOperator._real_apply_one_vector
         pymor.bindings.fenics.FenicsMatrixOperator._solver_options



   .. py:method:: _apply_inverse(self, r, v, adjoint=False)


   .. py:method:: _assemble_lincomb(self, operators, coefficients, identity_shift=0.0, solver_options=None, name=None)

      Try to assemble a linear combination of the given operators.

      Returns a new |Operator| which represents the sum ::

          c_1*O_1 + ... + c_N*O_N + s*I

      where `O_i` are |Operators|, `c_i`, `s` scalar coefficients and `I` the identity.

      This method is called in the :meth:`assemble` method of |LincombOperator| on
      the first of its operators. If an assembly of the given linear combination
      is possible, e.g. the linear combination of the system matrices of the
      operators can be formed, then the assembled operator is returned.
      Otherwise, the method returns `None` to indicate that assembly is not possible.

      .. admonition:: Parameters

          operators
              List of |Operators| `O_i` whose linear combination is formed.
          coefficients
              List of the corresponding linear coefficients `c_i`.
          identity_shift
              The coefficient `s`.
          solver_options
              |solver_options| for the assembled operator.
          name
              Name of the assembled operator.
              
      .. admonition:: Returns

          The assembled |Operator| if assembly is possible, otherwise `None`.
              

   .. py:method:: _create_solver(self, adjoint=False)


   .. py:method:: _real_apply_adjoint_one_vector(self, v, mu=None, prepare_data=None)


   .. py:method:: _real_apply_inverse_adjoint_one_vector(self, u, mu=None, initial_guess=None, least_squares=False, prepare_data=None)


   .. py:method:: _real_apply_inverse_one_vector(self, v, mu=None, initial_guess=None, least_squares=False, prepare_data=None)


   .. py:method:: _real_apply_one_vector(self, u, mu=None, prepare_data=None)


   .. py:method:: _solver_options(self, adjoint=False)



.. py:class:: FenicsOperator(form, source_space, range_space, source_function, dirichlet_bcs=(), parameter_setter=None, parameters={}, solver_options=None, name=None)

   Bases: :py:obj:`pymor.operators.interface.Operator`

   Wraps a FEniCS form as an |Operator|.





   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.bindings.fenics.FenicsOperator._build_dof_map
         pymor.bindings.fenics.FenicsOperator._restrict_dirichlet_bcs
         pymor.bindings.fenics.FenicsOperator._restrict_form
         pymor.bindings.fenics.FenicsOperator._set_mu
         pymor.bindings.fenics.FenicsOperator.apply
         pymor.bindings.fenics.FenicsOperator.jacobian
         pymor.bindings.fenics.FenicsOperator.restricted



   .. py:attribute:: linear
      :annotation: = False

      

   .. py:method:: _build_dof_map(self, V, V_r, dofs)


   .. py:method:: _restrict_dirichlet_bcs(self, submesh, source_dofs, V_r_source)


   .. py:method:: _restrict_form(self, submesh, source_dofs)


   .. py:method:: _set_mu(self, mu=None)


   .. py:method:: apply(self, U, mu=None)

      Apply the operator to a |VectorArray|.

      .. admonition:: Parameters

          U
              |VectorArray| of vectors to which the operator is applied.
          mu
              The |parameter values| for which to evaluate the operator.
              
      .. admonition:: Returns

          |VectorArray| of the operator evaluations.
              

   .. py:method:: jacobian(self, U, mu=None)

      Return the operator's Jacobian as a new |Operator|.

      .. admonition:: Parameters

          U
              Length 1 |VectorArray| containing the vector for which to compute
              the Jacobian.
          mu
              The |parameter values| for which to compute the Jacobian.
              
      .. admonition:: Returns

          Linear |Operator| representing the Jacobian.
              

   .. py:method:: restricted(self, dofs)

      Restrict the operator range to a given set of degrees of freedom.

      This method returns a restricted version `restricted_op` of the
      operator along with an array `source_dofs` such that for any
      |VectorArray| `U` in `self.source` the following is true::

          self.apply(U, mu).dofs(dofs)
              == restricted_op.apply(NumpyVectorArray(U.dofs(source_dofs)), mu))

      Such an operator is mainly useful for
      :class:`empirical interpolation <pymor.operators.ei.EmpiricalInterpolatedOperator>`
      where the evaluation of the original operator only needs to be known
      for few selected degrees of freedom. If the operator has a small
      stencil, only few `source_dofs` will be needed to evaluate the
      restricted operator which can make its evaluation very fast
      compared to evaluating the original operator.

      .. admonition:: Parameters

          dofs
              One-dimensional |NumPy array| of degrees of freedom in the operator
              :attr:`~Operator.range` to which to restrict.
              
      .. admonition:: Returns

          restricted_op
              The restricted operator as defined above. The operator will have
              |NumpyVectorSpace| `(len(source_dofs))` as :attr:`~Operator.source`
              and |NumpyVectorSpace| `(len(dofs))` as :attr:`~Operator.range`.
          source_dofs
              One-dimensional |NumPy array| of source degrees of freedom as
              defined above.
              


.. py:class:: FenicsVector(impl)

   Bases: :py:obj:`pymor.vectorarrays.list.CopyOnWriteVector`

   Wraps a FEniCS vector to make it usable with ListVectorArray.





   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.bindings.fenics.FenicsVector.__add__
         pymor.bindings.fenics.FenicsVector.__iadd__
         pymor.bindings.fenics.FenicsVector.__isub__
         pymor.bindings.fenics.FenicsVector.__mul__
         pymor.bindings.fenics.FenicsVector.__neg__
         pymor.bindings.fenics.FenicsVector.__sub__
         pymor.bindings.fenics.FenicsVector._axpy
         pymor.bindings.fenics.FenicsVector._copy_data
         pymor.bindings.fenics.FenicsVector._scal
         pymor.bindings.fenics.FenicsVector.amax
         pymor.bindings.fenics.FenicsVector.dofs
         pymor.bindings.fenics.FenicsVector.from_instance
         pymor.bindings.fenics.FenicsVector.inner
         pymor.bindings.fenics.FenicsVector.norm
         pymor.bindings.fenics.FenicsVector.norm2
         pymor.bindings.fenics.FenicsVector.sup_norm
         pymor.bindings.fenics.FenicsVector.to_numpy



   .. py:attribute:: __radd__
      

      

   .. py:method:: __add__(self, other)


   .. py:method:: __iadd__(self, other)


   .. py:method:: __isub__(self, other)


   .. py:method:: __mul__(self, other)


   .. py:method:: __neg__(self)


   .. py:method:: __sub__(self, other)


   .. py:method:: _axpy(self, alpha, x)


   .. py:method:: _copy_data(self)


   .. py:method:: _scal(self, alpha)


   .. py:method:: amax(self)
      :abstractmethod:


   .. py:method:: dofs(self, dof_indices)


   .. py:method:: from_instance(cls, instance)
      :classmethod:


   .. py:method:: inner(self, other)


   .. py:method:: norm(self)


   .. py:method:: norm2(self)


   .. py:method:: sup_norm(self)


   .. py:method:: to_numpy(self, ensure_copy=False)



.. py:class:: FenicsVectorSpace(V, id='STATE')

   Bases: :py:obj:`pymor.vectorarrays.list.ComplexifiedListVectorSpace`

   |VectorSpace| of |ListVectorArrays|.





   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.bindings.fenics.FenicsVectorSpace.__eq__
         pymor.bindings.fenics.FenicsVectorSpace.__hash__
         pymor.bindings.fenics.FenicsVectorSpace.dim
         pymor.bindings.fenics.FenicsVectorSpace.real_full_vector
         pymor.bindings.fenics.FenicsVectorSpace.real_make_vector
         pymor.bindings.fenics.FenicsVectorSpace.real_random_vector
         pymor.bindings.fenics.FenicsVectorSpace.real_vector_from_numpy
         pymor.bindings.fenics.FenicsVectorSpace.real_zero_vector



   .. py:attribute:: real_vector_type
      

      

   .. py:attribute:: vector_type
      

      

   .. py:method:: __eq__(self, other)

      Return self==value.


   .. py:method:: __hash__(self)

      Return hash(self).


   .. py:method:: dim(self)
      :property:


   .. py:method:: real_full_vector(self, value)


   .. py:method:: real_make_vector(self, obj)


   .. py:method:: real_random_vector(self, distribution, random_state, **kwargs)


   .. py:method:: real_vector_from_numpy(self, data, ensure_copy=False)


   .. py:method:: real_zero_vector(self)



.. py:class:: FenicsVisualizer(space, mesh_refinements=0)

   Bases: :py:obj:`pymor.core.base.ImmutableObject`

   Visualize a FEniCS grid function.

   .. admonition:: Parameters

       space
           The `FenicsVectorSpace` for which we want to visualize DOF vectors.
       mesh_refinements
           Number of uniform mesh refinements to perform for vtk visualization
           (of functions from higher-order FE spaces).
           




   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.bindings.fenics.FenicsVisualizer.visualize



   .. py:method:: visualize(self, U, title='', legend=None, filename=None, block=True, separate_colorbars=True)

      Visualize the provided data.

      .. admonition:: Parameters

          U
              |VectorArray| of the data to visualize (length must be 1). Alternatively,
              a tuple of |VectorArrays| which will be visualized in separate windows.
              If `filename` is specified, only one |VectorArray| may be provided which,
              however, is allowed to contain multiple vectors that will be interpreted
              as a time series.
          title
              Title of the plot.
          legend
              Description of the data that is plotted. If `U` is a tuple of |VectorArrays|,
              `legend` has to be a tuple of the same length.
          filename
              If specified, write the data to that file. `filename` needs to have an extension
              supported by FEniCS (e.g. `.pvd`).
          separate_colorbars
              If `True`, use separate colorbars for each subplot.
          block
              If `True`, block execution until the plot window is closed.
              


.. py:class:: RestrictedFenicsOperator(op, restricted_range_dofs)

   Bases: :py:obj:`pymor.operators.interface.Operator`

   Interface for |Parameter| dependent discrete operators.

   An operator in pyMOR is simply a mapping which for any given
   |parameter values| maps vectors from its `source` |VectorSpace|
   to vectors in its `range` |VectorSpace|.

   Note that there is no special distinction between functionals
   and operators in pyMOR. A functional is simply an operator with
   |NumpyVectorSpace| `(1)` as its `range` |VectorSpace|.

   .. attribute:: solver_options

      If not `None`, a dict which can contain the following keys:
      
      :'inverse':           solver options used for
                            :meth:`~Operator.apply_inverse`
      :'inverse_adjoint':   solver options used for
                            :meth:`~Operator.apply_inverse_adjoint`
      :'jacobian':          solver options for the operators returned
                            by :meth:`~Operator.jacobian`
                            (has no effect for linear operators)
      
      If `solver_options` is `None` or a dict entry is missing
      or `None`, default options are used.
      The interpretation of the given solver options is up to
      the operator at hand. In general, values in `solver_options`
      should either be strings (indicating a solver type) or
      dicts of options, usually with an entry `'type'` which
      specifies the solver type to use and further items which
      configure this solver.

   .. attribute:: linear

      `True` if the operator is linear.

   .. attribute:: source

      The source |VectorSpace|.

   .. attribute:: range

      The range |VectorSpace|.

   .. attribute:: H

      The adjoint operator, i.e. ::
      
          self.H.apply(V, mu) == self.apply_adjoint(V, mu)
      
      for all V, mu.
      





   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.bindings.fenics.RestrictedFenicsOperator.apply
         pymor.bindings.fenics.RestrictedFenicsOperator.jacobian



   .. py:method:: apply(self, U, mu=None)

      Apply the operator to a |VectorArray|.

      .. admonition:: Parameters

          U
              |VectorArray| of vectors to which the operator is applied.
          mu
              The |parameter values| for which to evaluate the operator.
              
      .. admonition:: Returns

          |VectorArray| of the operator evaluations.
              

   .. py:method:: jacobian(self, U, mu=None)

      Return the operator's Jacobian as a new |Operator|.

      .. admonition:: Parameters

          U
              Length 1 |VectorArray| containing the vector for which to compute
              the Jacobian.
          mu
              The |parameter values| for which to compute the Jacobian.
              
      .. admonition:: Returns

          Linear |Operator| representing the Jacobian.
              


.. py:data:: _DEFAULT_SOVLER
   

   

.. py:function:: _solver_options(solver=_DEFAULT_SOVLER, preconditioner=None, keep_solver=True)


.. py:function:: compute_parent_facet_indices(submesh, mesh)


