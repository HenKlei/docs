:mod:`pymor.core.cache`
=======================

.. py:module:: pymor.core.cache

.. autoapi-nested-parse::

   This module provides the caching facilities of pyMOR.

   Any class that wishes to provide cached method calls should derive from
   :class:`CacheableObject`. Methods which are to be cached can then
   be marked using the :class:`cached` decorator.

   To ensure consistency, :class:`CacheableObject` derives from
   |ImmutableObject|: The return value of a cached method call should
   only depend on its arguments as well as the immutable state of the class
   instance.

   Making this assumption, the keys for cache lookup are created from
   the following data:

       1. the instance's :attr:`~CacheableObject.cache_id` in case of a
          :attr:`~CacheRegion.persistent` :class:`CacheRegion`, else the instance's
          :attr:`~pymor.core.base.BasicObject.uid`,
       2. the method's `__name__`,
       3. the method's arguments.

   Note that instances of |ImmutableObject| are allowed to have mutable
   private attributes. It is the implementors responsibility not to break things.
   (See this :ref:`warning <ImmutableObjectWarning>`.)

   Backends for storage of cached return values derive from :class:`CacheRegion`.
   Currently two backends are provided for memory-based and disk-based caching
   (:class:`MemoryRegion` and :class:`DiskRegion`). The available regions
   are stored in the module level `cache_regions` dict. The user can add
   additional regions (e.g. multiple disk cache regions) as required.
   :attr:`CacheableObject.cache_region` specifies a key of the `cache_regions` dict
   to select a cache region which should be used by the instance.
   (Setting :attr:`~CacheableObject.cache_region` to `None` or `'none'` disables caching.)

   By default, a 'memory', a 'disk' and a 'persistent' cache region are configured. The
   paths and maximum sizes of the disk regions, as well as the maximum number of keys of
   the memory cache region can be configured via the
   `pymor.core.cache.default_regions.disk_path`,
   `pymor.core.cache.default_regions.disk_max_size`,
   `pymor.core.cache.default_regions.persistent_path`,
   `pymor.core.cache.default_regions.persistent_max_size` and
   `pymor.core.cache.default_regions.memory_max_keys` |defaults|.

   There two ways to disable and enable caching in pyMOR:

       1. Calling :func:`disable_caching` (:func:`enable_caching`), to disable
          (enable) caching globally.
       2. Calling :meth:`CacheableObject.disable_caching`
          (:meth:`CacheableObject.enable_caching`) to disable (enable) caching
          for a given instance.

   Caching of a method is only active if caching has been enabled both globally
   (enabled by default) and on instance level. For debugging purposes, it is moreover
   possible to set the environment variable `PYMOR_CACHE_DISABLE=1` which overrides
   any call to :func:`enable_caching`.

   A cache region can be emptied using :meth:`CacheRegion.clear`. The function
   :func:`clear_caches` clears each cache region registered in `cache_regions`.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.core.cache.CacheRegion
   pymor.core.cache.CacheableObject
   pymor.core.cache.DiskRegion
   pymor.core.cache.MemoryRegion



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.core.cache._safe_filename
   pymor.core.cache.build_cache_key
   pymor.core.cache.cached
   pymor.core.cache.cleanup_non_persistent_regions
   pymor.core.cache.clear_caches
   pymor.core.cache.default_regions
   pymor.core.cache.disable_caching
   pymor.core.cache.enable_caching



Attributes
~~~~~~~~~~

.. autoapisummary::

   pymor.core.cache.NoneType
   pymor.core.cache._caching_disabled
   pymor.core.cache.cache_regions


.. py:class:: CacheRegion

   Base class for all pyMOR cache regions.

   .. attribute:: persistent

      If `True`, cache entries are kept between multiple
      program runs.
      





   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.core.cache.CacheRegion.clear
         pymor.core.cache.CacheRegion.get
         pymor.core.cache.CacheRegion.set



   .. py:method:: clear(self)
      :abstractmethod:

      Clear the entire cache region.


   .. py:method:: get(self, key)
      :abstractmethod:

      Return cache entry for given key.

      .. admonition:: Parameters

          key
              The key for the cache entry.
              
      .. admonition:: Returns

          `(True, entry)`
              in case the `key` has been found in the cache region.
          `(False, None)`
              in case the `key` is not present in the cache region.
              

   .. py:method:: set(self, key, value)
      :abstractmethod:

      Set cache entry for `key` to given `value`.

      This method is usually called only once for
      any given `key` (with the exemption of issues
      due to concurrency).



.. py:class:: CacheableObject

   Bases: :py:obj:`pymor.core.base.ImmutableObject`

   Base class for anything that wants to use our built-in caching.

   .. attribute:: cache_region

      Name of the :class:`CacheRegion` to use. Must correspond to a key in
      the :attr:`cache_regions` dict. If `None` or `'none'`, caching
      is disabled.

   .. attribute:: cache_id

      Identifier for the object instance on which a cached method is called.
      





   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.core.cache.CacheableObject._cached_method_call
         pymor.core.cache.CacheableObject.cached_method_call
         pymor.core.cache.CacheableObject.disable_caching
         pymor.core.cache.CacheableObject.enable_caching



   .. py:method:: _cached_method_call(self, method, pass_self, argnames, defaults, args, kwargs)


   .. py:method:: cached_method_call(self, method, *args, **kwargs)

      Call a given `method` and cache the return value.

      This method can be used as an alternative to the :func:`cached`
      decorator.

      .. admonition:: Parameters

          method
              The method that is to be called. This has to be a method
              of `self`.
          args
              Positional arguments for `method`.
          kwargs
              Keyword arguments for `method`
              
      .. admonition:: Returns

          The (possibly cached) return value of `method(*args, **kwargs)`.
              

   .. py:method:: disable_caching(self)

      Disable caching for this instance.


   .. py:method:: enable_caching(self, region, cache_id=None)

      Enable caching for this instance.

      .. warning::
          Note that using :meth:`~pymor.core.base.ImmutableObject.with_`
          will reset :attr:`cache_region` and :attr:`cache_id` to their class
          defaults.

      .. admonition:: Parameters

          region
              Name of the |CacheRegion| to use. Must correspond to a key in
              the :attr:`cache_regions` dict. If `None` or `'none'`, caching
              is disabled.
          cache_id
              Identifier for the object instance on which a cached method is called.
              Must be specified when `region` is :attr:`~CacheRegion.persistent`.
              When `region` is not :attr:`~CacheRegion.persistent` and no `cache_id`
              is given, the object's :attr:`~pymor.core.base.BasicObject.uid`
              is used instead.
              


.. py:class:: DiskRegion(path, max_size, persistent)

   Bases: :py:obj:`CacheRegion`

   Base class for all pyMOR cache regions.

   .. attribute:: persistent

      If `True`, cache entries are kept between multiple
      program runs.
      





   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.core.cache.DiskRegion.clear
         pymor.core.cache.DiskRegion.get
         pymor.core.cache.DiskRegion.set



   .. py:method:: clear(self)

      Clear the entire cache region.


   .. py:method:: get(self, key)

      Return cache entry for given key.

      .. admonition:: Parameters

          key
              The key for the cache entry.
              
      .. admonition:: Returns

          `(True, entry)`
              in case the `key` has been found in the cache region.
          `(False, None)`
              in case the `key` is not present in the cache region.
              

   .. py:method:: set(self, key, value)

      Set cache entry for `key` to given `value`.

      This method is usually called only once for
      any given `key` (with the exemption of issues
      due to concurrency).



.. py:class:: MemoryRegion(max_keys)

   Bases: :py:obj:`CacheRegion`

   Base class for all pyMOR cache regions.

   .. attribute:: persistent

      If `True`, cache entries are kept between multiple
      program runs.
      





   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.core.cache.MemoryRegion.clear
         pymor.core.cache.MemoryRegion.get
         pymor.core.cache.MemoryRegion.set



   .. py:attribute:: NO_VALUE
      

      

   .. py:method:: clear(self)

      Clear the entire cache region.


   .. py:method:: get(self, key)

      Return cache entry for given key.

      .. admonition:: Parameters

          key
              The key for the cache entry.
              
      .. admonition:: Returns

          `(True, entry)`
              in case the `key` has been found in the cache region.
          `(False, None)`
              in case the `key` is not present in the cache region.
              

   .. py:method:: set(self, key, value)

      Set cache entry for `key` to given `value`.

      This method is usually called only once for
      any given `key` (with the exemption of issues
      due to concurrency).



.. py:data:: NoneType
   

   

.. py:data:: _caching_disabled
   

   

.. py:function:: _safe_filename(old_name)


.. py:function:: build_cache_key(obj)


.. py:data:: cache_regions
   

   

.. py:function:: cached(function)

   Decorator to make a method of `CacheableObject` actually cached.


.. py:function:: cleanup_non_persistent_regions()


.. py:function:: clear_caches()

   Clear all cache regions.


.. py:function:: default_regions(disk_path=os.path.join(tempfile.gettempdir(), 'pymor.cache.' + getpass.getuser()), disk_max_size=1024**3, persistent_path=os.path.join(tempfile.gettempdir(), 'pymor.persistent.cache.' + getpass.getuser()), persistent_max_size=1024**3, memory_max_keys=1000)


.. py:function:: disable_caching()

   Globally disable caching.


.. py:function:: enable_caching()

   Globally enable caching.


