:mod:`pymor.algorithms.simplify`
================================

.. py:module:: pymor.algorithms.simplify


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.algorithms.simplify.ExpandRules
   pymor.algorithms.simplify.ContractRules



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.algorithms.simplify.expand
   pymor.algorithms.simplify.contract



.. py:function:: expand(obj)

   Expand concatenations of LincombOperators.

   To any given |Operator| or |Model|, the following
   transformations are applied recursively:

   - :class:`Concatenations <pymor.operators.constructions.ConcatenationOperator>`
     of |LincombOperators| are expanded. E.g. ::

         (O1 + O2) @ (O3 + O4)

     becomes::

         O1 @ O3 + O1 @ O4 + O2 @ O3 + O2 @ O4

   - |LincombOperators| inside |LincombOperators| are merged into a single
     |LincombOperator|

   - |ConcatenationOperators| inside |ConcatenationOperators| are merged into a
     single |ConcatenationOperator|.

   .. admonition:: Parameters

       obj
           Either a |Model| or an |Operator| to which the expansion rules are
           applied recursively for all
           :meth:`children <pymor.algorithms.rules.RuleTable.get_children>`.
           
   .. admonition:: Returns

       The transformed object.
           

.. py:function:: contract(obj)

   Contract linear combinations and concatenations of |Operators|.

   To any given |Operator| or |Model|, the following
   transformations are applied recursively:

   - :class:`Concatenations <pymor.operators.constructions.ConcatenationOperator>`
     of non-parametric linear |Operators| are contracted into a single |Operator|
     when possible. Products of sparse matrices are not computed, however.

   - Non-parametric :class:`linear combinations <pymor.operators.constructions.LincombOperator>`
     of non-parametric operators are merged.

   .. admonition:: Parameters

       obj
           Either a |Model| or an |Operator| to which the contraction rules are
           applied recursively for all
           :meth:`children <pymor.algorithms.rules.RuleTable.get_children>`.
           
   .. admonition:: Returns

       The transformed object.
           

.. py:class:: ExpandRules

   Bases: :py:obj:`pymor.algorithms.rules.RuleTable`

   Define algorithm by a table of match conditions and corresponding actions.

   |RuleTable| manages a table of |rules|, stored in the `rules`
   attributes, which can be :meth:`applied <apply>` to given
   objects.

   A new table is created by subclassing |RuleTable| and defining
   new methods which are decorated with :class:`match_class`,
   :class:`match_generic` or another :class:`rule` subclass.
   The order of the method definitions determines the order in
   which the defined |rules| are applied.

   .. admonition:: Parameters

       use_caching
           If `True`, cache results of :meth:`apply`.
           
   .. attribute:: rules

      `list` of all defined |rules|.
      

   **Methods**

   .. autoapisummary::
      :nosignatures:

      pymor.algorithms.simplify.ExpandRules.action_LincombOperator
      pymor.algorithms.simplify.ExpandRules.action_ConcatenationOperator
      pymor.algorithms.simplify.ExpandRules.action_recurse


   .. py:method:: action_LincombOperator(self, op)


   .. py:method:: action_ConcatenationOperator(self, op)


   .. py:method:: action_recurse(self, op)



.. py:class:: ContractRules

   Bases: :py:obj:`pymor.algorithms.rules.RuleTable`

   Define algorithm by a table of match conditions and corresponding actions.

   |RuleTable| manages a table of |rules|, stored in the `rules`
   attributes, which can be :meth:`applied <apply>` to given
   objects.

   A new table is created by subclassing |RuleTable| and defining
   new methods which are decorated with :class:`match_class`,
   :class:`match_generic` or another :class:`rule` subclass.
   The order of the method definitions determines the order in
   which the defined |rules| are applied.

   .. admonition:: Parameters

       use_caching
           If `True`, cache results of :meth:`apply`.
           
   .. attribute:: rules

      `list` of all defined |rules|.
      

   **Methods**

   .. autoapisummary::
      :nosignatures:

      pymor.algorithms.simplify.ContractRules.action_LincombOperator
      pymor.algorithms.simplify.ContractRules.action_ConcatenationOperator
      pymor.algorithms.simplify.ContractRules.action_recurse


   .. py:method:: action_LincombOperator(self, op)


   .. py:method:: action_ConcatenationOperator(self, op)


   .. py:method:: action_recurse(self, op)



