:mod:`pymor.discretizers.builtin.gui.jupyter.threejs`
=====================================================

.. py:module:: pymor.discretizers.builtin.gui.jupyter.threejs


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.discretizers.builtin.gui.jupyter.threejs.ColorBarRenderer
   pymor.discretizers.builtin.gui.jupyter.threejs.Renderer
   pymor.discretizers.builtin.gui.jupyter.threejs.ThreeJSPlot



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.discretizers.builtin.gui.jupyter.threejs._normalize
   pymor.discretizers.builtin.gui.jupyter.threejs.visualize_py3js



.. py:class:: ColorBarRenderer(render_size, color_map, vmin=None, vmax=None)

   Bases: :py:obj:`ipywidgets.widgets.HBox`

   Displays multiple widgets horizontally using the flexible box model.

   .. admonition:: Parameters

       {box_params}
           
   .. rubric:: Examples

   >>> import ipywidgets as widgets
   >>> title_widget = widgets.HTML('<em>Horizontal Box Example</em>')
   >>> slider = widgets.IntSlider()
   >>> widgets.HBox([title_widget, slider])






   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.discretizers.builtin.gui.jupyter.threejs.ColorBarRenderer._gen_sprite
         pymor.discretizers.builtin.gui.jupyter.threejs.ColorBarRenderer.freeze_camera
         pymor.discretizers.builtin.gui.jupyter.threejs.ColorBarRenderer.goto



   .. py:method:: _gen_sprite(self)


   .. py:method:: freeze_camera(self, freeze=True)


   .. py:method:: goto(self, idx)



.. py:class:: Renderer(U, grid, render_size, color_map, title, bounding_box=([0, 0], [1, 1]), codim=2, vmin=None, vmax=None)

   Bases: :py:obj:`ipywidgets.widgets.VBox`

   Displays multiple widgets vertically using the flexible box model.

   .. admonition:: Parameters

       {box_params}
           
   .. rubric:: Examples

   >>> import ipywidgets as widgets
   >>> title_widget = widgets.HTML('<em>Vertical Box Example</em>')
   >>> slider = widgets.IntSlider()
   >>> widgets.VBox([title_widget, slider])






   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.discretizers.builtin.gui.jupyter.threejs.Renderer._async_load_data
         pymor.discretizers.builtin.gui.jupyter.threejs.Renderer._get_mesh
         pymor.discretizers.builtin.gui.jupyter.threejs.Renderer._load_data
         pymor.discretizers.builtin.gui.jupyter.threejs.Renderer._setup_scene
         pymor.discretizers.builtin.gui.jupyter.threejs.Renderer.freeze_camera
         pymor.discretizers.builtin.gui.jupyter.threejs.Renderer.goto



   .. py:method:: _async_load_data(self, data)
      :async:


   .. py:method:: _get_mesh(self, i, u)


   .. py:method:: _load_data(self, data)


   .. py:method:: _setup_scene(self, bounding_box, render_size)


   .. py:method:: freeze_camera(self, freeze=True)


   .. py:method:: goto(self, idx)



.. py:class:: ThreeJSPlot(grid, color_map, title, bounding_box, codim, U, vmins, vmaxs, separate_colorbars, size)

   Bases: :py:obj:`ipywidgets.widgets.VBox`

   Displays multiple widgets vertically using the flexible box model.

   .. admonition:: Parameters

       {box_params}
           
   .. rubric:: Examples

   >>> import ipywidgets as widgets
   >>> title_widget = widgets.HTML('<em>Vertical Box Example</em>')
   >>> slider = widgets.IntSlider()
   >>> widgets.VBox([title_widget, slider])






   .. admonition:: Methods
      :class: admoition-methods

      .. autoapisummary::
         :nosignatures:

         pymor.discretizers.builtin.gui.jupyter.threejs.ThreeJSPlot.finish_loading



   .. py:method:: finish_loading(self)
      :async:



.. py:function:: _normalize(u, vmin=None, vmax=None)


.. py:function:: visualize_py3js(grid, U, bounding_box=([0, 0], [1, 1]), codim=2, title=None, legend=None, separate_colorbars=False, rescale_colorbars=False, columns=2, color_map=get_cmap('viridis'))

   Generate a pythreejs Plot and associated controls for scalar data associated to a
   two-dimensional |Grid|.

   The grid's |ReferenceElement| must be the triangle or square. The data can either
   be attached to the faces or vertices of the grid.

   .. admonition:: Parameters

       grid
           The underlying |Grid|.
       U
           |VectorArray| of the data to visualize. If `len(U) 1`, the data is visualized
           as a time series of plots. Alternatively, a tuple of |VectorArrays| can be
           provided, in which case a subplot is created for each entry of the tuple. The
           lengths of all arrays have to agree.
       bounding_box
           A bounding box in which the grid is contained.
       codim
           The codimension of the entities the data in `U` is attached to (either 0 or 2).
       title
           Title of the plot.
       legend
           Description of the data that is plotted. Most useful if `U` is a tuple in which
           case `legend` has to be a tuple of strings of the same length.
       separate_colorbars
           If `True`, use separate colorbars for each subplot.
       rescale_colorbars
           If `True`, rescale colorbars to data in each frame.
       columns
           The number of columns in the visualizer GUI in case multiple plots are displayed
           at the same time.
       color_map
           a Matplotlib Colormap object
           

